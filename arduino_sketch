//lade bibliotheken
#include "U8glib.h"
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>
#include "ClickButton.h"

//setup hardware
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NO_ACK);
const int ledpin = 9;
const int buttonpin = 3;
ClickButton button1(buttonpin, LOW, CLICKBTN_PULLUP);

// setzte variablen
int vcc;
int adcvaluev;
int adcvaluea;
int voltage;
int ampere;
int batterystatus;
int battmap;
int hg;
int ledState = 0;
int fadeValue = 4;
int function = 0;
int draw_state = 0;

float temperature;
float pressure;
float ampout;
float voltout;
float wattout;

const long fadeDelay = 10; // Time in milliseconds between fade steps
long adjustFaderTime = 0;  // Time to adjust the fader
long currentTime;
long previousMillis = 0;
long interval = 2000;

boolean fadeUp = false;    // false means fade down
boolean oldFadeUp = fadeUp;



void setup(void) {

  //init barosensor
  (!bmp.begin());
  pinMode(ledpin, OUTPUT);
  
  button1.debounceTime   = 10;   // Debounce timer in ms
  button1.multiclickTime = 250;  // Time limit for multi clicks
  button1.longClickTime  = 500; // time until "held-down clicks" register
}

// zeichne schirm f√ºr Luftdrucksymbol
const uint8_t berg_bitmap[] U8G_PROGMEM = {
  0x00, 0x38, 0x54, 0x92, 0x92, 0x10, 0x10, 0x18,
};

// zeichne coneheads logo  
#define u8g_logo_width 128
#define u8g_logo_height 40
const uint8_t logo_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0xe0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0xe0, 0xf9, 0xc0, 0x07, 0xef, 0x01, 0x1f, 0xbc,
  0x07, 0x7c, 0xc0, 0x1f, 0x78, 0x0f, 0x3f, 0x00, 0xf0, 0x30, 0xe0, 0x1f,
  0xff, 0xc3, 0x7f, 0xfc, 0x0f, 0xff, 0xe1, 0x3f, 0xfc, 0x8f, 0x7f, 0x00,
  0xf0, 0x00, 0xf0, 0x1f, 0xff, 0xc7, 0x7f, 0xfc, 0x1f, 0xff, 0xf1, 0x7f,
  0xfc, 0xcf, 0xf3, 0x00, 0xf0, 0x00, 0xf8, 0x3e, 0x9f, 0xe7, 0xf1, 0x7c,
  0x9e, 0xc7, 0xf3, 0x78, 0x9e, 0xcf, 0x03, 0x00, 0xf0, 0x00, 0x78, 0x3c,
  0x8f, 0xe7, 0xff, 0x3c, 0x9e, 0xff, 0x03, 0x7c, 0x1e, 0xcf, 0x3f, 0x00,
  0xf0, 0x30, 0x78, 0x3c, 0x8f, 0xe7, 0xff, 0x3c, 0x9e, 0xff, 0xc3, 0x7f,
  0x1e, 0x8f, 0x7f, 0x00, 0xf0, 0xf0, 0x78, 0x3c, 0x8f, 0xe7, 0x01, 0x3c,
  0x9e, 0x07, 0xe0, 0x79, 0x1e, 0x0f, 0xfe, 0x00, 0xe0, 0xf9, 0xf8, 0x3c,
  0x8f, 0xe7, 0xf3, 0x3c, 0x9e, 0xcf, 0xf3, 0x78, 0x1e, 0x0f, 0xf0, 0x00,
  0xe0, 0x7f, 0xf0, 0x1f, 0x8f, 0xc7, 0x7f, 0x3c, 0x1e, 0xff, 0xf1, 0x7f,
  0xfc, 0xcf, 0xf3, 0x00, 0xc0, 0x3f, 0xe0, 0x0f, 0x8f, 0xc7, 0x7f, 0x3c,
  0x1e, 0xff, 0xe1, 0x7f, 0xfc, 0x8f, 0x7f, 0x00, 0x80, 0x1f, 0xc0, 0x07,
  0x8f, 0x07, 0x1f, 0x3c, 0x1e, 0x7c, 0xc0, 0x7b, 0x78, 0x0f, 0x3f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00 };

//zeichne initial logo  
#define u8g_init_width 128
#define u8g_init_height 46
const uint8_t init_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xe0, 0x13, 0x00, 0x04, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x0c, 0x00, 0x00, 0x84, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0xff,
  0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x82, 0xe0, 0xff, 0x2f, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x78, 0xfc, 0xe9, 0xe1, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x1e, 0xe4,
  0xc9, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x1f, 0xe8, 0x81, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x0f, 0xd0, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x0f, 0xeb,
  0x00, 0x1f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xe0, 0x07, 0xf0, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xd8, 0x00, 0x7e, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x23, 0xc0,
  0x00, 0x7e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf8, 0x23, 0xc4, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xd1, 0x01, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x93, 0xf8,
  0x02, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xfe, 0x21, 0xf8, 0x04, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x23, 0xf8, 0x08, 0xfc, 0x05, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x11, 0xf8,
  0x10, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xfe, 0x09, 0x18, 0x90, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x09, 0x78, 0x10, 0xdc, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x00, 0xe6,
  0x20, 0xdd, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x9e, 0x05, 0xd1, 0x20, 0xc2, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x85, 0xb8, 0x01, 0xd0, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x85, 0x70,
  0x20, 0xfc, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xfe, 0x95, 0x08, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0xfe, 0x25, 0xf8, 0x10, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xe5, 0xf8,
  0x10, 0x1c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0xbc, 0x85, 0xf8, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x09, 0xf8, 0x08, 0xd0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x0a, 0xf8,
  0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf0, 0x08, 0xf8, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x70, 0x01, 0x18, 0x40, 0x3e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x12, 0xb8,
  0x10, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x81, 0x12, 0x9c, 0x01, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x27, 0xfc, 0x81, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x07, 0xfc,
  0x43, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x07, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xff, 0x3f, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
  0xff, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x53, 0x40, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x54,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x00, 0x0c, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00 }; 


//init adc
long readvcc() {
  long result;
  // Read 1.1V reference against Avcc
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  delay(5); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Convert
  while (bit_is_set(ADCSRA,ADSC));
  result = ADCL;
  result |= ADCH<<8;
  result = 1125300L / result; // Back-calculate Avcc in mV
  return result;
}

// start f√ºr screens
void u8g_start(void) {
}

// data screen
void u8g_data(uint8_t a)
{
  // zeichne header
  u8g.setFont(u8g_font_helvR12);
  u8g.drawStr(30,12,"Coneheads");
  u8g.drawHLine(0,14,128);

  //zeichne batterie rahmen
  u8g.drawFrame(2,0,18,12);
  u8g.drawFrame(19,2,4,8);

  //gebe gemessene spannung auf oled aus
  u8g.setFont(u8g_font_unifont);
  u8g.drawStr(0,26,"U:");
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(16, 26); 
  u8g.print(voltout);

  //gebe gemessenen strom auf oled aus
  u8g.setFont(u8g_font_unifont);
  u8g.drawStr(0,38,"I");
  u8g.drawStr(8,38,":");
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(16, 38); 
  u8g.print(ampout);

  //gebe errechnete leistung auf oled aus
  u8g.setFont(u8g_font_unifont);
  u8g.drawStr(0,50,"P:");
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(16, 50); 
  u8g.print(wattout);

  //messe temperatur und gebe sie auf oled aus
  u8g.setFont(u8g_font_unifont);
  u8g.drawCircle(58, 17, 1);
  u8g.drawStr(59,26,"C");
  u8g.drawStr(65,26,":");
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(70, 26); 
  u8g.print(temperature);

  //messe luftdruck und gebe ihn auf oled aus
  u8g.setFont(u8g_font_unifont);
  u8g.drawBitmapP( 59, 28, 1, 8, berg_bitmap);
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(77, 38); 
  u8g.print(hg);

  // helligkeit anzeigen
  u8g.setFont(u8g_font_unifont);
  u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(77, 50); 
  u8g.print(fadeValue);

  //mappe spannung f√ºr das batterie symbol
  u8g.drawBox(2,0,batterystatus,12);

}

void u8g_logo(uint8_t a)
{
  //display logo
  u8g.drawXBMP( 0, 0, u8g_logo_width, u8g_logo_height, logo_bits);
}

void u8g_init(uint8_t a)
{
  //display initial
  u8g.drawXBMP( 0, 16, u8g_init_width, u8g_init_height, init_bits);
}


void draw(void) {
  u8g_start();
  switch(draw_state)
  {
  case 0: 
    u8g_logo(draw_state); 
    break;
  case 1: 
    u8g_logo(draw_state); 
    break;
  case 2: 
    u8g_logo(draw_state); 
    break;
  case 3: 
    u8g_init(draw_state); 
    break;
  case 4: 
    u8g_init(draw_state); 
    break;
  case 5: 
    u8g_init(draw_state); 
    break;
  case 6: 
    u8g_data(draw_state); 
    break;
  }
}

void loop(void) {

  unsigned int ADCValue;
  double voltage;
  double vcc;

  // strom via adc lesen
  vcc = readvcc()/1000.0;
  adcvaluea = analogRead(2);
  ampere = ((adcvaluea / 1.023) * vcc) / 2;
  ampout = ampere / 1000.000;

  //spannung via adc lesen
  vcc = readvcc()/1000.0;
  adcvaluev = analogRead(2);
  voltage = (adcvaluev / 1.023) * vcc;
  voltout = voltage / 1000.000;

  //berechne leistung
  wattout = voltout * ampout;

  bmp.getTemperature(&temperature);
  bmp.getPressure(&pressure);
  hg = pressure /100;

  battmap = voltout * 1000;
  batterystatus = map (battmap, 0, 3300, 0, 18);

  //

  currentTime = (long)millis();

  button1.Update();

  if (button1.clicks != 0) function = button1.clicks;
  
    // toggle led on a single click
  if(button1.clicks == 1) ledState = !ledState;
  
  // toggle led to full brightness on double click
  if(button1.clicks == 2) {
      fadeValue = 255;
      ledState = 1;
  }

  // fade if button is held down during single-click
  if(function == -1 && button1.depressed == true)
  {
    ledState = true;  // force lights on, since we want to fade it up or down

    if (oldFadeUp == fadeUp) fadeUp = !fadeUp; // Switch direction

    if ( currentTime - adjustFaderTime > fadeDelay)
    {
      adjustFaderTime = currentTime + fadeDelay;
      if (fadeUp) fadeValue++; 
      else fadeValue--;

      if (fadeValue > 255) fadeValue = 255;
      if (fadeValue < 0)   fadeValue = 0;

    }
  } 
  else {
    // Save old fade direction for next time
    oldFadeUp = fadeUp;
    // Reset function
    function = 0;
  }
  
  //if (ledState == 0 && fadeValue != 4) fadeValue = 4;
  
  // update the LED
  if (ledState) analogWrite(ledpin,fadeValue); 
  else {
    analogWrite(ledpin, 0);
    fadeValue = 4;
  }

  unsigned long currentMillis = millis();
  if(currentMillis - previousMillis > interval) {
    previousMillis = currentMillis;
    // picture loop
    u8g.firstPage();  
    do {
      draw();
    } 
    while( u8g.nextPage() );
    draw_state++;
    if ( draw_state > 6 )
      draw_state = 6;
  }

}
